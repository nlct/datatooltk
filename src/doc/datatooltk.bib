% Encoding: UTF-8

% ABBREVIATIONS

@abbreviation{gui,
  short={GUI},
  long={graphical user interface}
}

@abbreviation{LF,
  short={L\&F},
  long={Look and Feel}
}

@abbreviation{csv,
  short={CSV},
  long={comma-separated values}
}

@abbreviation{sql,
  short={SQL},
  long={structured query language}
}

@abbreviation{ietf,
  short={IETF},
  long={internet engineering task force}
}

% TERMS

@entry{mysql,
  name={MySQL},
  description={An open source SQL database}
}

@entry{cwd,
  name={current working directory},
  description={The directory in which the application was started}
}

@entry{texparserlib,
  name={\TeX\ Parser Library},
  description={A Java library (\url{https://github.com/nlct/texparser}) 
  designed for parsing \TeX\Slash\LaTeX\ source, which is used by 
  \app{datatooltk}, \app{bib2gls} and the \gls{texjavahelp} system}
}

@entry{texjavahelp,
 name={\TeX\ Java Help},
 description={A set of Java command line applications and a Java
library that's used to create the help system for \app{datatooltk}
(that is, the HTML and XML files contained in the
\filefmt{lib/resources/helpset} subdirectories).
The PDF documentation is created as a by-product as it's an
intermediate step in the process}
}

% APPLICATIONS

@commonapplication{app.datatooltk,
 name={\appfmt{data\-tool\-tk}},
 syntax={\oargm{options}}
}

@application{app.datatooltk-gui,
 name={\appfmt{data\-tool\-tk\dhyphen gui}},
 syntax={\oargm{options}},
 description={Invokes \code{\app{datatooltk} \switch{gui}
\meta{options}} with a splash screen}
}

@application{app.arara}
@application{app.time}
@application{app.makeglossaries}
@application{app.bib2gls}

% SWITCHES

@switch{switch.help,
  parent={app.datatooltk},
  shortswitch={h},
  description={Prints help and exits}
}

@switch{switch.version,
  parent={app.datatooltk},
  shortswitch={v},
  description={Prints version information and exits}
}

@switch{switch.gui,
  parent={app.datatooltk},
  shortswitch={g},
  description={Invoke \app{datatooltk} in \glsxtrshort{gui} mode}
}

@switch{switch.batch,
  parent={app.datatooltk},
  shortswitch={b},
  description={Invoke \app{datatooltk} in batch mode}
}

@switch{switch.output,
  parent={app.datatooltk},
  shortswitch={o},
  syntax={\meta{filename}},
  description={Save the database to \meta{filename} (batch mode only)}
}

@switch{switch.in,
  parent={app.datatooltk},
  shortswitch={i},
  syntax={\meta{filename}},
  description={Load the \sty{datatool} file \meta{filename}}
}

@switch{switch.output-format,
  parent={app.datatooltk},
  syntax={\meta{format}},
  description={Sets the default file format for output files}
}

@switch{switch.tex-encoding,
  parent={app.datatooltk},
  syntax={\meta{encoding}},
  description={Sets the encoding for the \TeX\ files},
  seealso={switch.csv-encoding}
}

@switch{switch.csv-encoding,
  parent={app.datatooltk},
  syntax={\meta{encoding}},
  description={Sets the encoding for the \gls{csv} files},
  seealso={switch.tex-encoding}
}

@switch{switch.csvencoding,
  parent={app.datatooltk},
  syntax={\meta{encoding}},
  description={synonym for \switch{csv-encoding}},
  alias={switch.csv-encoding}
}

@switch{switch.name,
  parent={app.datatooltk},
  syntax={\meta{label}},
  description={Sets the database name (that is, its identifying
label) to \meta{label}}
}

@switch{switch.debug,
  parent={app.datatooltk},
  description={Enables debug mode}
}

@switch{switch.nodebug,
  parent={app.datatooltk},
  description={Disables debug mode (default)}
}

@switch{switch.compat,
  parent={app.datatooltk},
  syntax={\meta{level}},
  description={Sets the compatibility level, where \meta{level}
may be \qtt{latest} or \qtt{1.6}}
}

@switch{switch.owner-only,
  parent={app.datatooltk},
  description={Set the read\slash write permissions when saving 
\ext{dbtex} files to owner only (operating system dependent)}
}

@switch{switch.noowner-only,
  parent={app.datatooltk},
  description={Don't change the read\slash write permissions when saving 
\ext{dbtex} files}
}

@switch{switch.map-tex-specials,
  parent={app.datatooltk},
  description={Map \TeX\ special characters when importing data from
  non-TeX sources (that is, from \gls{csv}, spreadsheets or databases)}
}

@switch{switch.nomap-tex-specials,
  parent={app.datatooltk},
  description={Don't map \TeX\ special characters when importing
data (default)}
}

@switch{switch.auto-trim-labels,
  parent={app.datatooltk},
  description={Automatically strip leading and trailing spaces from
database and column identifiers}
}

@switch{switch.noauto-trim-labels,
  parent={app.datatooltk},
  description={Don't automatically strip leading and trailing spaces from
database and column identifiers}
}

@switch{switch.seed,
  parent={app.datatooltk},
  syntax={\meta{number}},
  description={Set the random generator seed to \meta{number} or
clear it if \meta{number} is \code{""} (that is, an empty string)}
}

@switch{switch.shuffle,
  parent={app.datatooltk},
  description={Shuffle the database (always performed after \switch{sort},
   regardless of the option order, if both are present)}
}

@switch{switch.noshuffle,
  parent={app.datatooltk},
  description={Don't shuffle the database (default)}
}

@switch{switch.sort,
  parent={app.datatooltk},
  syntax={\oargm{prefix}\meta{field}},
  description={Sort the database according to the column whose label
is \meta{field}. Optionally, \meta{prefix} may be \code{+}
(ascending order) or \code{-} (descending order). If \meta{prefix}
  is omitted, ascending is assumed},
  seealso={switch.shuffle}
}

@switch{switch.sort-locale,
  parent={app.datatooltk},
  syntax={\meta{value}},
  description={If the \meta{value} is the keyword \qtt{none}, use
letter-sorting for strings. Otherwise \meta{value} should be a valid
\glsxtrshort{ietf} language tag that identifies a locale to sort
according to that locale's alphabetical order}
}

@switch{switch.sort-case-sensitive,
  parent={app.datatooltk},
  description={Use case-sensitive comparisons when letter-sorting
strings (\code{\switch{sort-locale} none}) or for the string comparison 
functions used by \switch{filter}}
}

@switch{switch.sort-case-insensitive,
  parent={app.datatooltk},
  description={Use case-insensitive comparisons when letter-sorting
strings (\code{\switch{sort-locale} none}) or for the string comparison 
functions used by \switch{filter}}
}

@switch{switch.truncate,
  parent={app.datatooltk},
  syntax={\meta{n}},
  description={Truncate the database to the first \meta{n} rows}
}

@switch{switch.remove-columns,
  parent={app.datatooltk},
  syntax={\meta{column list}},
  description={Remove the columns identified by \meta{column list}}
}

@switch{switch.remove-except-columns,
  parent={app.datatooltk},
  syntax={\meta{column list}},
  descriptions={Remove all columns except those identified by
\meta{column list}}
}

@switch{switch.filter,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{operator} \meta{value}},
  description={Add the given filter, which returns true if the value
in the column whose label is given by \meta{key} matches the
operation \meta{operator} \meta{value} where \meta{operator} may be one of: 
\qtt{eq} (equals \meta{value}),
\qtt{ne} (does not equal \meta{value}),
\qtt{le} (less than or equal \meta{value}),
\qtt{lt} (less than \meta{value}),
\qtt{ge} (greater than or equal \meta{value}),
\qtt{gt} (greater than \meta{value}),
\qtt{regex} (matches the regular expression \meta{value}).
Multiple filters may be specified}
}

@switch{switch.filter-or,
  parent={app.datatooltk},
  description={Use logical OR operator when filtering (default)}
}

@switch{switch.filter-and,
  parent={app.datatooltk},
  description={Use logical AND operator when filtering}
}

@switch{switch.filter-include,
  parent={app.datatooltk},
  description={When filtering, discard rows that don't match the
filter and keep those that do match (default)}
}

@switch{switch.filter-exclude,
  parent={app.datatooltk},
  description={When filtering, discard rows that match the
filter and keep those that don't match (default)}
}

@switch{switch.merge,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{db file}},
  description={Merge the input or imported database with the
database stored in the given \meta{db file}}
}

@switch{switch.csv,
  parent={app.datatooltk},
  syntax={\meta{csv file}},
  description={Import data from the given \glsxtrshort{csv} file}
}

@switch{switch.merge-csv,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{csv file}},
  description={As \switch{merge} but the data to be merged is
imported from the given \glsxtrshort{csv} file}
}

@switch{switch.csv-sep,
  parent={app.datatooltk},
  syntax={\meta{character}},
  defaultvalue={\code{,}},
  description={Specified the character used to separate values in
\glsxtrshort{csv} files}
}

@switch{switch.sep,
  parent={app.datatooltk},
  syntax={\meta{character}},
  description={synonym for \switch{csv-sep}},
  alias={switch.csv-sep}
}

@switch{switch.csv-delim,
  parent={app.datatooltk},
  syntax={\meta{character}},
  defaultvalue={\code{"}},
  description={Specified the character used to delimit values in
\glsxtrshort{csv} files}
}

@switch{switch.delim,
  parent={app.datatooltk},
  syntax={\meta{character}},
  description={synonym for \switch{csv-delim}},
  alias={switch.csv-delim}
}

@switch{switch.csv-escape,
  parent={app.datatooltk},
  syntax={\meta{character}},
  description={Specified the character used to escape values in
\glsxtrshort{csv} files}
}

@switch{switch.csvescape,
  parent={app.datatooltk},
  syntax={\meta{character}},
  description={synonym for \switch{csv-escape}},
  alias={switch.csv-escape}
}

@switch{switch.nocsv-escape,
  parent={app.datatooltk},
  syntax={\meta{character}},
  description={Don't have a designated character used to escape values in
\glsxtrshort{csv} files}
}

@switch{switch.nocsvescape,
  parent={app.datatooltk},
  syntax={\meta{character}},
  description={synonym for \switch{nocsv-escape}},
  alias={switch.nocsv-escape}
}

@switch{switch.csv-skiplines,
  parent={app.datatooltk},
  syntax={\meta{n}},
  description={Skip the first \meta{n} rows in
\glsxtrshort{csv} files. Blank rows are always included in this
count, even if \switch{csv-skip-empty-rows} is set}
}

@switch{switch.csv-strictquotes,
  parent={app.datatooltk},
  description={Ignore any undelimited information in
\glsxtrshort{csv} files},
  seealso={switch.csv-delim}
}

@switch{switch.nocsv-strictquotes,
  parent={app.datatooltk},
  description={Allow undelimited data in
\glsxtrshort{csv} files}
}

@switch{switch.csv-header,
  parent={app.datatooltk},
  description={The \glsxtrshort{csv} and spreadsheet files have a header row 
(default)}
}

@switch{switch.csvheader,
  parent={app.datatooltk},
  description={synonym for \switch{csv-header}},
  alias={switch.csv-header}
}

@switch{switch.nocsv-header,
  parent={app.datatooltk},
  description={The \glsxtrshort{csv} and spreadsheet files do not have a header row 
(default)}
}

@switch{switch.nocsvheader,
  parent={app.datatooltk},
  description={synonym for \switch{nocsv-header}},
  alias={switch.nocsv-header}
}

@switch{switch.csv-skip-empty-rows,
  parent={app.datatooltk},
  description={Skip empty lines found in \glsxtrshort{csv} and
spreadsheet files}
}

@switch{switch.nocsv-skip-empty-rows,
  parent={app.datatooltk},
  description={Don't skip empty lines found in \glsxtrshort{csv} and
spreadsheet files}
}

@switch{switch.xls,
  parent={app.datatooltk},
  syntax={\meta{xls file}},
  description={Import data from the given Excel \ext{xls} file}
}

@switch{switch.merge-xls,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{xls file}},
  description={As \switch{merge} but the data to be merged is
imported from the given Excel \ext{xls} file}
}

@switch{switch.ods,
  parent={app.datatooltk},
  syntax={\meta{ods file}},
  description={Import data from the given Open Document spreadsheet
\ext{ods} file}
}

@switch{switch.merge-ods,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{ods file}},
  description={As \switch{merge} but the data to be merged is
imported from the given Open Document spreadsheet \ext{ods} file}
}

@switch{switch.sheet,
  parent={app.datatooltk},
  syntax={\meta{sheet id}},
  defaultvalue={1},
  description={The sheet to select when reading data from an Excel
workbook or Open Document Spreadsheet, where \meta{sheet id} is
either the sheet index (starting from 0) or the name of the sheet}
}

@switch{switch.sql,
  parent={app.datatooltk},
  syntax={\meta{query statement}},
  description={Import data from an \glsxtrshort{sql} database
   where \meta{query statement} is the SELECT query that identifies
the required data}
}

@switch{switch.merge-sql,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{query statement}},
  description={As \switch{merge} but the data to be merged is
imported using the given \glsxtrshort{sql} query}
}

@switch{switch.sqldb,
  parent={app.datatooltk},
  syntax={\meta{name}},
  description={The \glsxtrshort{sql} database name}
}

@switch{switch.sqlprefix,
  parent={app.datatooltk},
  syntax={\meta{prefix}},
  defaultvalue={jdbc:mysql://},
  description={The \glsxtrshort{sql} prefix. Currently, only
\gls{mysql} is supported}
}

@switch{switch.sqlport,
  parent={app.datatooltk},
  syntax={\meta{port}},
  defaultvalue={3306},
  description={The \glsxtrshort{sql} port number}
}

@switch{switch.sqlhost,
  parent={app.datatooltk},
  syntax={\meta{port}},
  defaultvalue={localhost},
  description={The \glsxtrshort{sql} host}
}

@switch{switch.sqluser,
  parent={app.datatooltk},
  syntax={\meta{username}},
  description={The \glsxtrshort{sql} username}
}

@switch{switch.sqlpassword,
  parent={app.datatooltk},
  syntax={\meta{password}},
  description={The \glsxtrshort{sql} password (insecure). If
omitted, you will be prompted for a password if you try to import
data from an \glsxtrshort{sql} database},
  seealso={switch.noconsole-action}
}

@switch{switch.wipepassword,
  parent={app.datatooltk},
  description={Wipe the password from memory as soon as it has been
used to connect to an \glsxtrshort{sql} database (default)}
}

@switch{switch.nowipepassword,
  parent={app.datatooltk},
  description={Don't wipe the password from memory as soon as it has been
used to connect to an \glsxtrshort{sql} database (default)}
}

@switch{switch.noconsole-action,
  parent={app.datatooltk},
  syntax={\meta{action}},
  defaultvalue={gui},
  description={The action to perform if \app{datatooltk} is run in batch mode and a password is required, where
   \meta{action} may be one of: \qtt{error},
   \qtt{stdin}, or \qtt{gui}}
}

@switch{switch.probsoln,
  parent={app.datatooltk},
  syntax={\meta{filename}},
  description={Import \sty{probsoln} data from \meta{filename}}
}

@switch{switch.merge-probsoln,
  parent={app.datatooltk},
  syntax={\meta{key} \meta{filename}},
  description={As \switch{merge} but the data to be merged is
imported from the given \sty{probsoln} file}
}

% FILE EXTENSIONS/FORMATS

@fileext{ext.csv}
@fileext{ext.tsv}
@fileext{ext.xls}
@fileext{ext.xlsx}
@fileext{ext.ods}
@fileext{ext.dbtex}
@fileext{ext.dtltex}
@fileext{ext.tex}
@fileext{ext.xml}

@entry{DBTEX2,
  name={DB\-TEX~2.0},
  description={a file format that can be opened or saved by
   \app{datatooltk} and can be recognised by \sty{datatool}['s]
   \code{\gls{DTLread}\oarg{\optval{format}{tex}}\margm{file}} and
   \code{\gls{DTLwrite}\oarg{\optval{format}{dbtex-2}}\margm{file}
   commands. It's faster for \sty{datatool} to load than \gls{DTLTEX2}
   but is hard to read and has the drawback of changing the category
   code of \code{@} to \qt{letter} in the data. It also doesn't
   allow leading space characters in data. The database name is
   hard-coded in the internal commands and can't be changed with the
   \opt{read.name} option in \gls{DTLread}}
 }
}

@entry{DBTEX3,
  name={DB\-TEX~3.0},
  description={a file format that can be opened or saved by
   \app{datatooltk} and can be recognised by \sty{datatool}['s]
   \code{\gls{DTLread}\oarg{\optval{format}{tex}}\margm{file}} and
   \code{\gls{DTLwrite}\oarg{\optval{format}{dbtex-3}}\margm{file}}
   commands. It's not quite as faster for \sty{datatool} to load
   than \gls{DBTEX2}, but doesn't perform any category code change
   and allows entries to be stored in their datum format (that is,
   the textual representation, numeric value, currency symbol and
   data type are stored separately). This means that
   \sty{datatool} doesn't need to repeatedly parse the elements for
   numeric values. The other advantage in this format over
   \gls{DBTEX2} is that the database name provided in the file can
   be changed with the \opt{read.name} value in the optional argument
   of \gls{DTLread} and there is no category code change. 
   This file format was new to \sty{datatool} v3.0,
   see the \sty{datatool} manual for further details}
}

@entry{DTLTEX2,
  name={DTL\-TEX~2.0},
  description={a file format that can be opened or saved by
   \app{datatooltk} and can be recognised by \sty{datatool}['s]
   \code{\gls{DTLread}\oarg{\optval{format}{tex}}\margm{file}} and
   \code{\gls{DTLwrite}\oarg{\optval{format}{dtltex-2}}\margm{file}
   commands. It's slower for \sty{datatool} to load than the
   \ext{dbtex} formats but is easier to read as it only contains
   document-level commands (such as \gls{DTLnewdb}). The database name is
   hard-coded in the command arguments and can't be changed with the
   \opt{name} option in \gls{DTLread}. The data may be parsed and
   trimmed, depending on the \sty{datatool} package settings. There
   is no category code change}
 }
}

@entry{DTLTEX3,
  name={DTL\-TEX~3.0},
  description={a file format that can be opened or saved by
   \app{datatooltk} and can be recognised by \sty{datatool}['s]
   \code{\gls{DTLread}\oarg{\optval{format}{tex}}\margm{file}} and
   \code{\gls{DTLwrite}\oarg{\optval{format}{dtltex-3}}\margm{file}
   commands. It's similar to \gls{DTLTEX2} but only provides a
   database name that may be overridden with the \opt{name} option
   in \gls{DTLread}. This file format was new to \sty{datatool} v3.0,
   see the \sty{datatool} manual for further details}
 }
}


% FILES

@file{file.datatooltk-settings,
  name={data\-tool\-tk\dhyphen set\-tings}
}

@file{file.datatooltk.jar,
  name={data\-tool\-tk\dfullstop jar}
}

@file{file..datatooltk,
  name={\appfmt{.data\-tool\-tk}}
}

% ENVIRONMENT VARIABLES

@variable{DATATOOLTK}

% PACKAGES

@package{pkg.datatool,
  name={\styfmt{data\-tool}}
}

@package{pkg.datagidx,
  name={\styfmt{data\-gidx}}
}

@package{pkg.probsoln,
  name={\styfmt{prob\-soln}}
}

@package{pkg.person}
@package{pkg.glossaries}

@package{pkg.glossaries-extra,
 name={\styfmt{glos\-saries\dhyphen extra}}
}

@package{pkg.verbatim}
@package{pkg.listings}

@package{pkg.etoolbox,
  name={\styfmt{etool\-box}}
}

@package{pkg.inputenc,
  name={\styfmt{input\-enc}}
}

% COMMANDS

@command{DTLread,
  name={\csfmt{DTL\-read}},
  syntax={\oargm{options}\margm{filename}}
}

@option{opt.name,
  parent={DTLread},
  name={\optfmt{name}},
  syntax={\margm{db-name}}
}

@command{DTLwrite,
  name={\csfmt{DTL\-write}},
  syntax={\oargm{options}\margm{filename}}
}

@option{opt.format,
  parent={DTLwrite},
  syntax={\margm{format-type}}
}

@command{DTLsaverawdb,
  name={\csfmt{DTL\-save\-raw\-db}}
}

@command{DTLprotectedsaverawdb,
  name={\csfmt{DTL\-pro\-tected\-save\-raw\-db}}
}

@command{DTLloaddb,
  name={\csfmt{DTL\-load\-db}}
}

@command{DTLloaddbtex,
  name={\csfmt{DTL\-load\-db\-tex}}
}

@command{dtllastloadeddb,
  name={\csfmt{dtl\-last\-load\-ed\-db}}
}

@command{DTLaction,
 name={\csfmt{DTL\-action}},
 syntax={\oargm{options}\margm{action-name}}
}

@option{opt.action.name,
 parent={DTLaction},
 name={\optfmt{name}},
 syntax={\margm{db-name}}
}

@command{DTLsetup,
 name={\csfmt{DTL\-set\-up}},
 syntax={\margm{options}}
}

@option{opt.default-name,
 parent={DTLsetup},
 name={\optfmt{default\dhyphen name}},
 syntax={\margm{db-name}}
}

@option{opt.store-datum,
 parent={DTLsetup},
 name={\optfmt{store\dhyphen datum}},
 syntax={\margm{boolean}}
}

@option{opt.separator,
 parent={DTLsetup},
 syntax={\margm{char}}
}

@option{opt.delimiter,
 parent={DTLsetup},
 syntax={\margm{char}}
}

@option{opt.new-value-trim,
 parent={DTLsetup},
 name={\optfmt{new\dhyphen value\dhyphen trim}},
 syntax={\margm{boolean}}
}

@option{opt.new-value-expand,
 parent={DTLsetup},
 name={\optfmt{new\dhyphen value\dhyphen expand}},
 syntax={\margm{boolean}}
}

@command{DTLnewdb,
 name={\csfmt{DTL\-new\-db}}
}

@command{DTLnewcurrencysymbol,
 name={\csfmt{DTL\-new\-cur\-rency\-sym\-bol}}
}

@command{DTLpar,
  name={\csfmt{DTL\-par}}
}

@command{DTLifnull,
  name={\csfmt{DTL\-if\-null}}
}

@command{DTLifnullorempty,
  name={\csfmt{DTL\-if\-null\-or\-empty}}
}

@command{makeglossaries,
 name={\csfmt{make\-glos\-saries}}
}

@command{makenoidxglossaries,
 name={\csfmt{make\-no\-idx\-glos\-saries}}
}

@cspunctuation{nlbksl,
  symbol={\cspuncfmt{\char`\\ }},
  description={new row}
}

@command{newproblem,
  name={\csfmt{new\-prob\-lem}}
}

@command{loadallproblems,
  name={\csfmt{load\-all\-prob\-lems}}
}

@command{loadgidx,
 name={\csfmt{load\-gidx}}
}

@command{newgidx,
 name={\csfmt{new\-gidx}}
}

@command{glsadd,
 name={\csfmt{gls\-add}}
}

@command{glsaddall,
 name={\csfmt{gls\-add\-all}}
}

@command{newglossaryentry,
 name={\csfmt{new\-glos\-sary\-entry}}
}

@command{newterm,
 name={\csfmt{new\-term}}
}

@command{@dtlnovalue,
 name={\csfmt{@dtl\-no\-value}}
}

@command{dtlgetrow,
 name={\csfmt{dtl\-get\-row}}
}

@command{DTLforeach,
 name={\csfmt{DTL\-for\-each}}
}

@command{DTLdisplaydb,
 name={\csfmt{DTL\-dis\-play\-db}}
}

@command{DTLsort,
 name={\csfmt{DTL\-sort}}
}

@command{DTLsortdata,
 name={\csfmt{DTL\-sort\-data}}
}

@command{ifdefempty,
 name={\csfmt{if\-def\-empty}}
}

@command{input}
@command{verbatiminput}

@command{pounds}
@command{euro}
@command{write18}
@command{verb}
@command{space}

@command{lstinline,
 name={\csfmt{lst\-in\-line}}
}

@command{lstinputlisting,
 name={\csfmt{lst\-in\-put\-list\-ing}}
}

@environment{env.defproblem,
  name={\envfmt{def\-prob\-lem}}
}

@environment{env.solution}

@environment{env.verbatim}
@environment{env.alltt,
  name={\envfmt{all\-tt}}
}
@environment{env.lstlisting,
  name={\envfmt{lst\-list\-ing}}
}

% INDEX ONLY

@index{database}

@punctuation{bksl,
 symbol={\code{\char`\\ }},
 description={backslash}
}

@punctuation{dbqt,
 description={double-quote},
 symbol={\code{"}}
}
@punctuation{comma,
 description={comma},
 symbol={\code{,}}
}
@punctuation{switchprefix,
 symbol={\code{-}},
 description={switches}
}

@indexplural{plugin}
@index{plugin.people,parent="plugin",name={\optfmt{people}}}
@index{plugin.datagidx,parent="plugin",name={\optfmt{data\-gidx}}}

@indexplural{template}
@index{template.people,parent="template",name={\optfmt{people}}}
@index{template.datagidx,parent="template",name={\optfmt{datagidx}}}
